#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Report browser.

Module <report_browser_win.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk

from iq.util import log_func
from iq.util import ini_func
from iq.util import file_func
from iq.util import global_func
from iq.util import lang_func
from iq.util import sys_func

from iq.engine.gtk import gtk_handler
from iq.engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager

from iq.dialog import dlg_func

from iq_report.report import report_gen_func

from .. import report_folder_func

__version__ = (0, 0, 0, 1)

_ = lang_func.getTranslation().gettext

# Browser modes
REPORT_VIEWER_MODE = 0
REPORT_EDITOR_MODE = 1


class iqReportBrowserWin(gtk_handler.iqGtkHandler,
                         gtktreeview_manager.iqGtkTreeViewManager):
    """
    Report browser class.
    """
    def __init__(self, parent=None, mode=REPORT_VIEWER_MODE, report_dir='', *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'report_browser_win.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='report_browser_win',  
                                          *args, **kwargs)

        self._report_dirname = report_dir

    def init(self):
        """
        Init form.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        self.buildReportTree(self._report_dirname)

    def getReportSettingsINIFile(self):
        """
        Get the name of the configuration file in which the path
        to the report folder is stored.
        """
        if global_func.getProjectName():
            prj_settings_filename = file_func.getProjectSettingsFilename()
            return prj_settings_filename
        return os.path.join(report_folder_func.getRootDirname(), 'settings.ini')

    def onPreviewButtonClicked(self, widget):
        """
        Preview button click handler.
        """
        item_data = self.getGtkTreeViewSelectedItemData(treeview=self.getGtkObject('report_treeview'))
        log_func.debug(u'Preview <%s>' % str(item_data[report_folder_func.REP_FILE_IDX] if item_data else u'-'))

        if item_data is not None and item_data[report_folder_func.REP_ITEMS_IDX] is None:
            report_gen_func.getReportGeneratorSystem(item_data[report_folder_func.REP_FILE_IDX],
                                                     parent=self,
                                                     refresh=True).preview()
        else:
            dlg_func.openWarningBox(title=_(u'WARNING'),
                                    message=_(u'You must select a report'), parent=self)

    def onPrintButtonClicked(self, widget):
        """
        Print button click handler.
        """
        item_data = self.getGtkTreeViewSelectedItemData(treeview=self.getGtkObject('report_treeview'))
        log_func.debug(u'Print <%s>' % item_data[report_folder_func.REP_FILE_IDX] if item_data else u'-')
        if item_data is not None and item_data[report_folder_func.REP_ITEMS_IDX] is None:
            report_gen_func.getReportGeneratorSystem(item_data[report_folder_func.REP_FILE_IDX],
                                                     parent=self,
                                                     refresh=True).print()
        else:
            dlg_func.openWarningBox(title=_(u'WARNING'),
                                    message=_(u'You must select a report'), parent=self)

    def onPageSetupButtonClicked(self, widget):
        """
        Page setup button click handler.
        """
        item_data = self.getGtkTreeViewSelectedItemData(treeview=self.getGtkObject('report_treeview'))
        if item_data is not None and item_data[report_folder_func.REP_ITEMS_IDX] is None:
            report_gen_func.getReportGeneratorSystem(item_data[report_folder_func.REP_FILE_IDX], parent=self).setPageSetup()
        else:
            dlg_func.openWarningBox(title=_(u'WARNING'),
                                    message=_(u'You must select a report'), parent=self)

    def onExportButtonClicked(self, widget):
        """
        Convert button click handler.
        """
        item_data = self.getGtkTreeViewSelectedItemData(treeview=self.getGtkObject('report_treeview'))
        log_func.debug(u'Convert <%s>' % item_data[report_folder_func.REP_FILE_IDX] if item_data else u'-')
        if item_data is not None and item_data[report_folder_func.REP_ITEMS_IDX] is None:
            report_gen_func.getReportGeneratorSystem(item_data[report_folder_func.REP_FILE_IDX],
                                                     parent=self,
                                                     refresh=True).convert()
        else:
            dlg_func.openWarningBox(title=_(u'WARNING'),
                                    message=_(u'You must select a report'), parent=self)

    def onReportFolderButtonClicked(self, widget):
        """
        Report folder button click handler.
        """
        self._report_dirname = ini_func.loadParamINI(self.getReportSettingsINIFile(), 'REPORTS', 'report_dir')
        report_dirname = dlg_func.getDirDlg(parent=self, title=_(u'Select report folder path:'),
                                            default_path=self._report_dirname)
        if report_dirname:
            self._report_dirname = report_dirname
            ini_func.saveParamINI(self.getReportSettingsINIFile(), 'REPORTS', 'report_dir', self._report_dirname)

            self.getGtkObject('report_folder_label').set_text(self._report_dirname)
            self.buildReportTree(self._report_dirname)

    def onCreateButtonClicked(self, widget):
        """
        Create report button click handler.
        """
        report_gen_func.getCurReportGeneratorSystem().createNew(self._report_dirname)

    def onEditButtonClicked(self, widget):
        """
        Edit button click handler.
        """
        item = self.report_treectrl.GetSelection()
        item_data = self.report_treectrl.GetItemData(item)
        if item_data is not None and item_data[report_folder_func.REP_ITEMS_IDX] is None:
            rep_generator = report_gen_func.getReportGeneratorSystem(report_folder_func.item_data[report_folder_func.REP_FILE_IDX], parent=self)
            if rep_generator is not None:
                rep_generator.edit(item_data[0])
            else:
                log_func.warning(u'Report generator not defined. Type <%s>' % item_data[report_folder_func.REP_FILE_IDX])

    def onUpdateButtonClicked(self, widget):
        """
        Update button click handler.
        """
        # item = self.report_treectrl.GetSelection()
        # item_data = self.report_treectrl.GetItemData(item)
        item_data = self.getGtkTreeViewSelectedItemData(treeview=self.getGtkObject('report_treeview'))
        if item_data is not None and item_data[report_folder_func.REP_ITEMS_IDX] is None:
            log_func.debug(u'Update report <%s>' % item_data[0])
            report_gen_func.getReportGeneratorSystem(item_data[report_folder_func.REP_FILE_IDX], parent=self).update(
                item_data[0])
        else:
            report_gen_func.getCurReportGeneratorSystem(self).update()

        self.buildReportTree(self._report_dirname)

    def onExitButtonClicked(self, widget):
        """
        Exit button click handler.
        """
        self.getGtkTopObject().close()

    def buildReportTree(self, report_dir):
        """
        Build the report tree by report data.

        :param report_dir: Report directory.
        """
        rep_data = report_folder_func.getReportList(report_dir)
        if rep_data is None:
            log_func.warning(u'Error data. Report directory <%s>' % report_dir)
            return

        treeview = self.getGtkObject('report_treeview')
        self.clearGtkTreeView(treeview=treeview)
        # root = self.report_treectrl.AddRoot(_(u'Reports'), image=0)
        root = self.addGtkTreeViewRootItem(treeview=treeview, node=dict(description=_(u'Reports')))
        self.setGtkTreeViewItemData(treeview=treeview, item=root, item_data=None)
        self._appendItemsReportTree(parent_item=root, data=rep_data)
        self.expandGtkTreeViewItem(treeview=treeview, item=root)

    def _appendItemsReportTree(self, parent_item, data):
        """
        Add tree items based on the received report description.

        :param parent_item: Parent item.
        :param data: Report data branch.
        """
        if not data:
            log_func.warning(u'An empty list of report descriptions when building a report tree')

        treeview = self.getGtkObject('report_treeview')
        for item_data in data:
            label = '%s / %s' % (item_data[report_folder_func.REP_DESCRIPTION_IDX],
                                 os.path.basename(item_data[report_folder_func.REP_FILE_IDX]))
            # item = self.report_treectrl.AppendItem(parent_id, label, -1, -1, data=None)
            item = self.appendGtkTreeViewChildItem(treeview=treeview, parent_item=parent_item, columns=[None, label])

            if item_data[report_folder_func.REP_ITEMS_IDX] is not None:
                self._appendItemsReportTree(item, item_data[report_folder_func.REP_ITEMS_IDX])

                # self.report_treectrl.SetItemImage(item, 0, wx.TreeItemIcon_Normal)
                # self.report_treectrl.SetItemImage(item, 0, wx.TreeItemIcon_Selected)
            else:
                # self.report_treectrl.SetItemImage(item, item_data[report_folder_func.REP_IMG_IDX], wx.TreeItemIcon_Normal)
                # self.report_treectrl.SetItemImage(item, item_data[report_folder_func.REP_IMG_IDX], wx.TreeItemIcon_Selected)
                pass

            # self.report_treectrl.SetItemData(item, item_data)
            self.setGtkTreeViewItemData(treeview=treeview, item=item, item_data=item_data)

    def setReportDir(self, rep_dir):
        """
        Set report directory.

        :param rep_dir: Report directory.
        """
        self._report_dirname = rep_dir

    def getReportDir(self):
        """
        Get report folder.
        """
        return self._report_dirname


def openReportBrowserWin():
    """
    Open report_browser_win.

    :return: True/False.
    """
    result = False
    obj = None
    try:
        obj = iqReportBrowserWin()
        obj.init()
        obj.getGtkTopObject().run()
        result = True
    except:
        log_func.fatal(u'Error open window <report_browser_win>')

    if obj and obj.getGtkTopObject() is not None:
        obj.getGtkTopObject().destroy()
    return result                    


def openReportBrowser(parent_form=None, report_dir='', mode=REPORT_EDITOR_MODE, lock_run_copy=False):
    """
    Launch report browser.

    :param parent_form: The parent form, if not specified, creates a new application.
    :param report_dir: Directory where reports are stored.
    :param mode: Report browser mode.
    :param lock_run_copy: Lock run copy browser.
    :return: True/False.
    """
    if lock_run_copy:
        find_report_dir_process = sys_func.getActiveProcessCount(report_dir)
        if sys_func.isActiveProcess('iq_report --edit') or sys_func.isActiveProcess('iq_report --view') or (find_report_dir_process > 2):
            log_func.warning(u'Report browser already open [%d]' % find_report_dir_process)
            return False

    log_func.info(u'GTK library version: %s' % gi.__version__)

    result = False
    win = None
    try:
        win = iqReportBrowserWin(parent=parent_form, mode=mode,
                                 report_dir=report_dir)
        win.init()
        win.getGtkTopObject().show_all()
        result = True
    except:
        log_func.fatal(u'Error starting report browser')

    gi.repository.Gtk.main()

    if win and win.getGtkTopObject() is not None:
        win.getGtkTopObject().destroy()
    return result


if __name__ == '__main__':
    openReportBrowser()
