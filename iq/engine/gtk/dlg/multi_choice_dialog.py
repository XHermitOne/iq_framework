#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module <multi_choice_dialog.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk

from iq.util import log_func

from .. import gtk_handler
# from .. import gtktreeview_manager
# from .. import gtkwindow_manager
from .. import gtkbox_manager

__version__ = (0, 0, 0, 1)


class iqMultiChoiceDialog(gtk_handler.iqGtkHandler,
                          gtkbox_manager.iqGtkBoxManager):
    """
    Multi choice dialog class.
    """
    def __init__(self, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'multi_choice_dialog.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='multi_choice_dialog',  
                                          *args, **kwargs)

        self.check_buttons = list()
                                          
    def init(self):
        """
        Init form.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        pass

    def setChoices(self, choices):
        """
        Set choices.
        """
        assert isinstance(choices, (list, tuple)), u'Choices must be list or tuple'

        choice_box = self.getGtkObject('choice_box')
        self.clearGtkBox(box=choice_box)
        for check, label in choices:
            check_button = gi.repository.Gtk.CheckButton(label=str(label))
            check_button.set_active(check)
            self.check_buttons.append(check_button)
            choice_box.add(check_button)
        # After append widgets must be done show_all
        self.getGtkTopObject().show_all()

    def getChoices(self):
        """
        Get choices.
        """
        return tuple([(check_button.get_active(), check_button.get_label()) for check_button in self.check_buttons])

    def onCancelButtonClicked(self, widget):
        """
        Cancel button click handler.
        """
        self.getGtkTopObject().close()

    def onOkButtonClicked(self, widget):
        """
        OK button click handler.
        """
        self.getGtkTopObject().close()


def openMultiChoiceDialog(parent=None, title='', prompt_text='', choices=()):
    """
    Multiple choice dialog.

    :param parent: Parent form.
    :param title: Dialog form title.
    :param prompt_text: Dialog form prompt text.
    :param choices: List of selection lines as tuple in format ((True/False, 'line text'),...).
    :return: Selected choices as tuple ((True/False, 'line text'),...).
    """
    result = choices
    dlg = None
    try:
        dlg = iqMultiChoiceDialog()
        dlg.init()
        dlg.getGtkTopObject().set_title(title)
        dlg.getGtkObject('prompt_label').set_label(prompt_text)
        dlg.setChoices(choices)
        response = dlg.getGtkTopObject().run()
        if response == gi.repository.Gtk.ResponseType.OK:
            result = dlg.getChoices()
    except:
        log_func.fatal(u'Error open window <multi_choice_dialog>')

    if dlg and dlg.getGtkTopObject() is not None:
        dlg.getGtkTopObject().destroy()
    return result                    
