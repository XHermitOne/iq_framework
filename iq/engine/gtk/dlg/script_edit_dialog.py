#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module <script_edit_dialog.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import signal
import gi

gi.require_version('Gtk', '3.0')
gi.require_version('GtkSource', '4')
gi.require_version('Pango', '1.0')
import gi.repository.Gtk
import gi.repository.Pango
import gi.repository.GtkSource

from iq.util import log_func
from iq.util import lang_func

from iq.engine.gtk import gtk_handler
# from iq.engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager

__version__ = (0, 0, 0, 1)

_ = lang_func.getTranslation().gettext


class iqScriptEditDialog(gtk_handler.iqGtkHandler):
    """
    Script edit dialog class.
    """
    def __init__(self, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'script_edit_dialog.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='script_edit_dialog',  
                                          *args, **kwargs)

        self.edit_view = None

    def init(self):
        """
        Init form.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        pass

    def setEditor(self, edit_language_id='python'):
        """
        Set edit language.
        
        :param edit_language_id: Language id. python/python3/sql and etc.
        :return: True/False.
        """
        if self.edit_view is None:
            font_desc = gi.repository.Pango.FontDescription('monospace 14')

            lang_mgr = gi.repository.GtkSource.LanguageManager()
            lang = lang_mgr.get_language(edit_language_id)

            buffer = gi.repository.GtkSource.Buffer()
            buffer.set_language(lang)
            buffer.set_highlight_syntax(True)

            self.edit_view = gi.repository.GtkSource.View()
            self.edit_view.set_buffer(buffer)
            self.edit_view.set_show_line_numbers(True)

            scrolled_window = self.getGtkObject('text_scrolled_window')
            scrolled_window.add(self.edit_view)

            self.edit_view.modify_font(font_desc)
            self.edit_view.set_wrap_mode(gi.repository.Gtk.WrapMode.NONE)
            return True
        return False

    def setScriptText(self, script=''):
        """
        Set script text.

        :param script: Script text.
        :return: True/False.
        """
        if self.edit_view:
            source_buffer = self.edit_view.get_buffer()
            start = source_buffer.get_iter_at_offset(0)
            end = start.copy()
            source_buffer.insert(end, script)
            return True
        return False

    def getScriptText(self):
        """
        Get script text.
        """
        result = ''
        if self.edit_view:
            source_buffer = self.edit_view.get_buffer()
            start, end = source_buffer.get_bounds()
            result = source_buffer.get_text(start, end, True)
        return result

    def onCancelButtonClicked(self, widget):
        """
        Cancel button click handler.
        """
        self.getGtkTopObject().close()

    def onOkButtonClicked(self, widget):
        """
        OK button click handler.
        """
        self.getGtkTopObject().close()


def openScriptEditDialog(parent=None, title='', prompt_text='', edit_language_id='python', script=''):
    """
    Open script edit dialog.

    :param parent: Parent form.
    :param title: Dialog form title.
    :param prompt_text: Dialog prompt text.
    :param edit_language_id: Language id. python/python3/sql and etc.
    :param script: Script text.
    :return: Edited script text.
    """
    result = script
    dlg = None
    try:
        dlg = iqScriptEditDialog()
        dlg.getGtkTopObject().set_title(title)
        dlg.getGtkObject('prompt_label').set_label(prompt_text)
        dlg.init()
        dlg.setEditor(edit_language_id=edit_language_id)
        dlg.setScriptText(script)
        dlg.getGtkTopObject().show_all()
        response = dlg.getGtkTopObject().run()
        if response == gi.repository.Gtk.ResponseType.OK:
            result = dlg.getScriptText()
    except:
        log_func.fatal(u'Error open window <script_edit_dialog>')

    if dlg and dlg.getGtkTopObject() is not None:
        dlg.getGtkTopObject().destroy()
    return result                    


def openPythonEditDialog(parent=None, title='', prompt_text='', script=''):
    """
    Open python script edit dialog.

    :param parent: Parent form.
    :param title: Dialog form title.
    :param prompt_text: Dialog prompt text.
    :param script: Script text.
    :return: Edited script text.
    """
    return openScriptEditDialog(parent=parent, title=title, prompt_text=prompt_text,
                                edit_language_id='python', script=script)


def openSqlEditDialog(parent=None, title='', prompt_text='', script=''):
    """
    Open SQL script edit dialog.

    :param parent: Parent form.
    :param title: Dialog form title.
    :param prompt_text: Dialog prompt text.
    :param script: Script text.
    :return: Edited script text.
    """
    return openScriptEditDialog(parent=parent, title=title, prompt_text=prompt_text,
                                edit_language_id='sql', script=script)
