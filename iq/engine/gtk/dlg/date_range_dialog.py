#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module <date_range_dialog.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import datetime
import os
import os.path
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk

from iq.util import log_func

from iq.engine.gtk import gtk_handler
# from iq.engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager

from .std_dlg import getDateDlg

__version__ = (0, 0, 0, 1)

DEFAULT_ENTRY_DATE_FMT = '%d-%m-%Y'


class iqDateRangeDialog(gtk_handler.iqGtkHandler):
    """
    Unknown class.
    """
    def __init__(self, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'date_range_dialog.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='date_range_dialog',  
                                          *args, **kwargs)
                                          
    def init(self, title=None, is_concrete_date=False,
             default_start_date=None, default_stop_date=None):
        """
        Init form.

        :param title: Dialog title.
        :param is_concrete_date: Select concrete date?
        :param default_start_date: Default begin range date.
        :param default_stop_date: Default end range date.
        """
        self.initImages()
        self.initControls(title=title,
                          is_concrete_date=is_concrete_date,
                          default_start_date=default_start_date,
                          default_stop_date=default_stop_date)

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self, title=None, is_concrete_date=False,
                     default_start_date=None, default_stop_date=None):
        """
        Init controls method.

        :param title: Dialog title.
        :param is_concrete_date: Select concrete date?
        :param default_start_date: Default begin range date.
        :param default_stop_date: Default end range date.
        """
        if title:
            self.getGtkTopObject().set_title(title)

        self.getGtkObject('concrete_date_checkbutton').set_check(is_concrete_date)
        self.getGtkObject('to_date_entry').set_sensitive(not is_concrete_date)
        if is_concrete_date:
            first_date_txt = self.getGtkObject('from_date_entry').get_text()
            self.getGtkObject('to_date_entry').set_text(first_date_txt)

        if default_start_date:
            from_date_txt = default_start_date.strftime(DEFAULT_ENTRY_DATE_FMT)
        else:
            from_date_txt = datetime.date.today().strftime(DEFAULT_ENTRY_DATE_FMT)
        self.getGtkObject('from_date_entry').set_text(from_date_txt)

        if default_stop_date:
            to_date_txt = default_stop_date.strftime(DEFAULT_ENTRY_DATE_FMT)
        else:
            to_date_txt = datetime.date.today().strftime(DEFAULT_ENTRY_DATE_FMT)
        self.getGtkObject('to_date_entry').set_text(to_date_txt)

    def onCancelButtonClicked(self, widget):
        """
        <Cancel> button click handler.
        """
        self.getGtkTopObject().close()

    def onOkButtonClicked(self, widget):
        """
        <OK> button click handler.
        """
        self.getGtkTopObject().close()

    def onFromDateEntryIconPress(self, widget):
        """
        From date entry icon press handler.
        """
        selected_date = getDateDlg()
        if selected_date is not None:
            date_txt = selected_date.strftime(DEFAULT_ENTRY_DATE_FMT)
            self.getGtkObject('from_date_entry').set_text(date_txt)

    def onToDateEntryIconPress(self, widget):
        """
        To date entry icon press handler.
        """
        selected_date = getDateDlg()
        if selected_date is not None:
            date_txt = selected_date.strftime(DEFAULT_ENTRY_DATE_FMT)
            self.getGtkObject('to_date_entry').set_text(date_txt)
