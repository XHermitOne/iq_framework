#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module <login_dialog.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import signal
import hashlib
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk

from iq.util import log_func

from iq.engine.gtk import gtk_handler
# from iq.engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager

__version__ = (0, 0, 0, 1)


class iqLoginDialog(gtk_handler.iqGtkHandler):
    """
    Unknown class.
    """
    def __init__(self, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'login_dialog.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='login_dialog',  
                                          *args, **kwargs)

    def init(self, title=None, default_username=None, reg_users=None, user_descriptions=None):
        """
        Init form.

        :param title: Dialog form title.
        :param default_username: Default user name.
        :param user_descriptions: User description list.
        :param reg_users: User name list.
        """
        self.initImages()
        self.initControls(title=title,
                          default_username=default_username,
                          reg_users=reg_users,
                          user_descriptions=user_descriptions)

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self, title=None, default_username=None, reg_users=None, user_descriptions=None):
        """
        Init controls method.

        :param title: Dialog form title.
        :param default_username: Default user name.
        :param user_descriptions: User description list.
        :param reg_users: User name list.
        """
        if title:
            self.getGtkTopObject().set_title(title)

        if isinstance(reg_users, (list, tuple)):
            user_combobox_model = self.getGtkObject('user_combobox').get_model()
            for i, username in enumerate(reg_users):
                user_description = ''
                if isinstance(user_descriptions, (list, tuple)) and i < len(user_descriptions):
                    user_description = str(user_descriptions[i])
                user_combobox_model.append([username, user_description])

            if default_username and default_username in reg_users:
                selected_user_idx = reg_users.index(default_username)
                self.getGtkObject('user_combobox').set_active(selected_user_idx)
            else:
                self.getGtkObject('user_combobox').set_active(0)

    def onCancelButtonClicked(self, widget):
        """
        <Cancel> button click handler.
        """
        self.getGtkTopObject().close()

    def onOkButtonClicked(self, widget):
        """
        <OK> button click handler.
        """
        self.getGtkTopObject().close()

    def getUsername(self):
        """
        Get username.
        """
        selected_user_item = self.getGtkObject('user_combobox').get_active_iter()
        if selected_user_item:
            user_combobox_model = self.getGtkObject('user_combobox').get_model()
            return user_combobox_model.get_value(selected_user_item, 0)
        return ''

    def getPassword(self):
        """
        Get password.
        """
        return self.getGtkObject('password_entry').get_text()

    def getPasswordHash(self):
        """
        Get password hash as md5.
        """
        password = self.getPassword()
        if not password:
            password = ''
        return hashlib.md5(password.encode()).hexdigest()


def openLoginDialog(parent=None, title='', default_username='', reg_users=None, user_descriptions=None):
    """
    Open login user dialog.

    :param parent: Parent form.
    :param title: Dialog form title.
    :param default_username: Default user name.
    :param reg_users: User name list.
    :param user_descriptions: User description list.
    :return: Tuple: (username, password, password hash) or None if error.
    """
    result = None
    dlg = None
    try:
        dlg = iqLoginDialog()
        dlg.init(title=title,
                 default_username=default_username,
                 reg_users=reg_users,
                 user_descriptions=user_descriptions)
        request = dlg.getGtkTopObject().run()
        if request == gi.repository.Gtk.ResponseType.OK:
            result = (dlg.getUsername(), dlg.getPassword(), dlg.getPasswordHash())
    except:
        log_func.fatal(u'Error open window <login_dialog>')

    if dlg and dlg.getGtkTopObject() is not None:
        dlg.getGtkTopObject().destroy()
    return result                    
