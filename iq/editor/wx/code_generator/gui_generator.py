#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Python gui class generate functions.
"""

import os
import os.path
import inspect
import wx

from . import frame_generator
from . import dialog_generator
from . import panel_generator
from . import menubar_generator
from . import toolbar_generator

from ....util import log_func
from ....util import str_func
from ....util import imp_func
from ....util import txtfile_func
from ....dialog import dlg_func

__version__ = (0, 0, 0, 1)


def genPyModuleName(src_class_name):
    """
    Generate the file name from the form class name.

    :param src_class_name: Form class name.
    :return:
    """
    dst_module_name = src_class_name
    dst_module_name = dst_module_name[2:] if dst_module_name.startswith('iq') else dst_module_name
    dst_module_name = dst_module_name[:-9] if dst_module_name.endswith('Prototype') else dst_module_name
    dst_module_name = dst_module_name[:-5] if dst_module_name.endswith('Proto') else dst_module_name
    dst_module_name = str_func.replaceUpper2Lower(dst_module_name)
    return dst_module_name


def gen(src_filename=None, dst_filename=None, src_class_name=None, parent=None, rewrite=False):
    """
    Generation of the frame module modulo the form generated by wxFormBuilder.

    :param src_filename: Source python module filename generated by wxFormBuilder.
    :param dst_filename: Result python frame module filename.
    :param src_class_name: Source class name.
    :param parent: Parent form.
    :param rewrite: Rewrite result file if exists?
    :return: New python filename or None if error.
    """
    log_func.info(u'Generate python GUI module ... START')
    if not os.path.exists(src_filename):
        log_func.warning(u'Generation Python file. File <%s> not found' % src_filename)
        return None

    try:
        src_module_name = os.path.splitext(os.path.basename(src_filename))[0]
        src_module_path = os.path.dirname(src_filename)
        fb_module = imp_func.loadPyModule(src_module_name, src_filename)
        fb_module_classes = [var_name for var_name in dir(fb_module) if inspect.isclass(getattr(fb_module, var_name))]

        if src_class_name is None:
            if len(fb_module_classes) == 1:
                # Only one class per module
                src_class_name = fb_module_classes[0]
            else:
                choices = [frm_class_name for frm_class_name in fb_module_classes]
                choices.sort()
                src_class_name = dlg_func.getSingleChoiceDlg(parent=parent, title=u'GENERATOR',
                                                             prompt_text=u'Select prototype class:',
                                                             choices=choices)

        if dst_filename is None:
            # If the output file name is not defined, then generate the file name from the form class name
            dst_module_name = genPyModuleName(src_class_name)
            dst_filename = os.path.join(src_module_path, '%s.py' % dst_module_name)

        if os.path.exists(dst_filename) and rewrite:
            # Delete result file if exists
            os.remove(dst_filename)
            log_func.info(u'Python file <%s> is deleted' % dst_filename)

        if not os.path.exists(dst_filename):
            src_class = getattr(fb_module, src_class_name)
            py_txt = None
            if issubclass(src_class, wx.Frame):
                py_txt = frame_generator.genPythonFrame(fb_module, src_class_name)
            elif issubclass(src_class, wx.Dialog):
                py_txt = dialog_generator.genPythonDialog(fb_module, src_class_name)
            elif issubclass(src_class, wx.Panel):
                py_txt = panel_generator.genPythonPanel(fb_module, src_class_name)
            elif issubclass(src_class, wx.MenuBar):
                py_txt = menubar_generator.genPythonMenuBar(fb_module, src_class_name)
            elif issubclass(src_class, wx.ToolBar):
                py_txt = toolbar_generator.genPythonToolBar(fb_module, src_class_name)
            else:
                log_func.error(u'Unsupported type for generating python module <%s>' % src_class.__name__)

            log_func.info(u'Save file <%s>' % dst_filename)
            result = txtfile_func.saveTextFile(dst_filename, txt=py_txt)
            if result:
                return dst_filename
            else:
                log_func.error(u'Error save file <%s>' % dst_filename)
        else:
            msg = u'Python file <%s> exists. Generation not possible' % dst_filename
            log_func.error(msg)
            dlg_func.openErrBox(u'GENERATOR', msg)
    except:
        log_func.fatal(u'Error generation of the frame module modulo the form generated by wxFormBuilder')

    log_func.info(u'Generate python GUI module ... STOP')
    return None
