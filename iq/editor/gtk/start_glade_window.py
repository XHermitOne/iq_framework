#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module <start_glade_window.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk

from iq.util import log_func
from iq.dialog import dlg_func

from iq.engine.gtk import gtk_handler
# from iq.engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager

from iq.editor.gtk import glade_manager
from iq.editor.gtk.code_generator import gui_generator

from iq.engine.gtk import stored_gtk_form_manager


__version__ = (0, 0, 0, 1)


class iqStartGladeWindow(gtk_handler.iqGtkHandler,
                         stored_gtk_form_manager.iqStoredGtkFormsManager):
    """
    Start glade project window class.
    """
    def __init__(self, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'start_glade_win.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='start_glade_window',  
                                          *args, **kwargs)

        self.glade_filename = None

        self.glade_manager = glade_manager.iqGladeManager()

        self.loadCustomProperties()

    def init(self):
        """
        Init form.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        pass

    def onDestroy(self, widget):
        """
        """
        self.saveCustomProperties()
        gi.repository.Gtk.main_quit()

    def onOpenGladeProjectButtonClicked(self, widget):
        """
        Button click handler <Open>.
        """
        if os.path.exists(self.glade_filename):
            self.glade_manager.openProject(prj_filename=self.glade_filename)
        else:
            dlg_func.openWarningBox(title=u'WARNING',
                                    prompt_text=u'Glade project file <%s> not found' % self.glade_filename)
        self.getGtkTopObject().close()

    def onPreviewGladeProjectButtonClicked(self, widget):
        """
        Button click handler <Preview>.
        """
        if os.path.exists(self.glade_filename):
            self.glade_manager.previewProject(prj_filename=self.glade_filename)
        else:
            dlg_func.openWarningBox(title=u'WARNING',
                                    prompt_text=u'Glade project file <%s> not found' % self.glade_filename)
        self.getGtkTopObject().close()

    def onGeneratePyButtonClicked(self, widget):
        """
        Button click handler <Generate>.
        """
        result = gui_generator.gen(src_filename=self.glade_filename, parent=self)

        if result:
            msg = u'Python generate by <%s> was successful' % self.glade_filename
            dlg_func.openMsgBox(title=u'EDITOR', prompt_text=msg)
        else:
            msg = u'Python generate <%s> ended unsuccessfully' % self.glade_filename
            dlg_func.openErrBox(title=u'EDITOR', prompt_text=msg)
        self.getGtkTopObject().close()

    def onHelpButtonClicked(self, widget):
        """
        Help button click handler.
        """
        self.getGtkTopObject().close()

    def onExitButtonClicked(self, widget):
        """
        Exit button handler.
        """
        self.getGtkTopObject().close()

    def onNewGladeProjectButtonClicked(self, widget):
        """
        Button click handler <New>.
        """
        self.glade_manager.createProject()
        self.getGtkTopObject().close()


def openStartGladeWindow(glade_filename, *args, **kwargs):
    """
    Open start_glade_window.

    :return: True/False.
    """
    result = False
    win = None
    try:
        win = iqStartGladeWindow()
        win.glade_filename = glade_filename
        new_title = u'Glade project <%s>' % os.path.basename(glade_filename)
        win.getGtkTopObject().set_title(new_title)
        win.init()
        win.getGtkTopObject().run()
        result = True
    except:
        log_func.fatal(u'Error open window <start_glade_window>')

    if win and win.getGtkTopObject() is not None:
        win.getGtkTopObject().destroy()
    return result


def startGladeEditor(glade_filename, *args, **kwargs):
    """
    Open Glade editor window.

    :return: True/False.
    """
    log_func.info(u'GTK library version: %s' % gi.__version__)

    result = False
    win = None
    try:
        win = iqStartGladeWindow()
        win.glade_filename = glade_filename
        new_title = u'Glade project <%s>' % os.path.basename(glade_filename)
        win.getGtkTopObject().set_title(new_title)
        win.init()
        win.getGtkTopObject().show_all()
        result = True
    except:
        log_func.fatal(u'Error open window <start_glade_window>')

    gi.repository.Gtk.main()

    if win and win.getGtkTopObject() is not None:
        win.getGtkTopObject().destroy()
    return result

