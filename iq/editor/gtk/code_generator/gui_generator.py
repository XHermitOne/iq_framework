#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Python gui class generate functions.
"""

import os
import os.path
import inspect

from ....util import log_func
from ....util import str_func
from ....util import xml2dict
from ....util import txtfile_func
from ....dialog import dlg_func

__version__ = (0, 0, 0, 1)

DEFAULT_SRC_CLASS_NAME = u'iqUnknown'

EMPTY_PY_MODULE_FMT = u'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk

\"\"\"
Module <%s>. 
Generated by the iqFramework module the Glade prototype.
\"\"\"

class %s(gi.repository.Gtk.%s):
    """
    Unknown class.
    """
    def __init__(self):
        # Builder object
        self.builder = Gtk.Builder()
        self.builder.add_from_file('%s')
        
    def init(self):
        """
        Init form.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        pass


def open%s():
    """
    Open %s.

    :return: True/False.
    """
    window = None
    try:
        window = %s()
        window.init()
        window.show_all()
        return True
    except:
        log_func.fatal(u'Error open window <%s>')
    return False                    
'''

GTK_TOP_WINDOW_TYPES = ('GtkWindow',
                        'GtkOffscreenWindow',
                        'GtkApplicationWindow',
                        'GtkDialog',
                        'GtkAboutDialog',
                        'GtkFileChooserDialog',
                        'GtkColorChooserDialog',
                        'GtkFontChooserDialog',
                        'GtkMessageDialog',
                        'GtkRecentChooserDialog',
                        'GtkAssistent',
                        'GtkAppChooserDialog')


def genPyModuleName(src_name):
    """
    Generate the file name from the form class name.

    :param src_name: Source object Id/name.
    :return:
    """
    dst_module_name = src_name
    dst_module_name = dst_module_name[2:] if dst_module_name.startswith('iq') else dst_module_name
    dst_module_name = dst_module_name[:-9] if dst_module_name.endswith('Prototype') else dst_module_name
    dst_module_name = dst_module_name[:-5] if dst_module_name.endswith('Proto') else dst_module_name
    dst_module_name = dst_module_name[:-10] if dst_module_name.endswith('_prototype') else dst_module_name
    dst_module_name = dst_module_name[:-6] if dst_module_name.endswith('_proto') else dst_module_name
    dst_module_name = str_func.replaceUpper2Lower(dst_module_name)
    return dst_module_name


def gen(src_filename=None, dst_filename=None, src_name=None, parent=None, rewrite=False):
    """
    Generation of GUI frame python module by Glade project.

    :param src_filename: Glade project filename.
    :param dst_filename: Result python frame module filename.
    :param src_name: Source object Id/name.
    :param parent: Parent form.
    :param rewrite: Rewrite result file if exists?
    :return: New python filename or None if error.
    """
    log_func.info(u'Generate python GUI module ... START')
    if not os.path.exists(src_filename):
        log_func.warning(u'Generation Python file. File <%s> not found' % src_filename)
        return None

    try:
        src_module_name = os.path.splitext(os.path.basename(src_filename))[0]
        src_module_path = os.path.dirname(src_filename)

        # Get Glade xml project file as dictionary
        glade_xml_content = xml2dict.convertXmlFile2Dict(src_filename)
        glade_win = [dict(id=obj['@id'], classname=obj['@class']) for obj in glade_xml_content['interface']['object'] if obj.get('@class', None) in GTK_TOP_WINDOW_TYPES]

        if src_name is None:
            if len(glade_win) == 1:
                # Only one class per module
                src_name = glade_win[0]['id']
                src_type = glade_win[0]['classname']
            else:
                choices = [frm_name for frm_name, frm_type in glade_win]
                choices.sort()
                src_name = dlg_func.getSingleChoiceDlg(parent=parent,
                                                       title=u'GENERATOR',
                                                       prompt_text=u'Select prototype object:',
                                                       choices=choices)
                if not src_name:
                    # Cancel pressed
                    return
                src_type = glade_win[choices.index(src_name)]['classname']

        if dst_filename is None:
            # If the output file name is not defined, then generate the file name from the form class name
            dst_module_name = genPyModuleName(src_name)
            dst_filename = os.path.join(src_module_path, '%s.py' % dst_module_name)

        if os.path.exists(dst_filename) and rewrite:
            # Delete result file if exists
            os.remove(dst_filename)
            log_func.info(u'Python file <%s> is deleted' % dst_filename)

        if not os.path.exists(dst_filename):
            src_class_name = ''
            py_txt = EMPTY_PY_MODULE_FMT % (os.path.basename(dst_filename),
                                            src_name, src_type,
                                            os.path.basename(src_filename),
                                            src_name[2:] if src_name.startswith('iq') else src_name,
                                            src_name, src_name, src_name)
            log_func.info(u'Save file <%s>' % dst_filename)

            result = txtfile_func.saveTextFile(dst_filename, txt=py_txt)
            if result:
                return dst_filename
            else:
                log_func.warning(u'Error save file <%s>' % dst_filename)
        else:
            msg = u'Python file <%s> exists. Generation not possible' % dst_filename
            log_func.warning(msg)
            dlg_func.openErrBox(u'GENERATOR', msg)
    except:
        log_func.fatal(u'Error generation of gui python module by Glade project')

    log_func.info(u'Generate python GUI module ... STOP')
    return None
