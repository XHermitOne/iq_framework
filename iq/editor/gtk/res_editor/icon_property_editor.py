#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module <property_box.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk

from ....util import log_func
from ....util import icon_func

from ....engine.gtk.dlg import gtk_dlg_func

from iq.engine.gtk import gtk_handler
# from iq.engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager

from . import property_editor_proto

__version__ = (0, 0, 0, 1)

IMAGE_WILDCARD_FILTER = u'PNG images (*.png)|*.png'


class iqIconPropertyEditor(gtk_handler.iqGtkHandler,
                            property_editor_proto.iqPropertyEditorProto):
    """
    Library icon property editor class.
    """
    def __init__(self,  label='', value=None, choices=None, default=None, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'icon_property_editor.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='property_box',  
                                          *args, **kwargs)

        property_editor_proto.iqPropertyEditorProto.__init__(self, label=label, value=value,
                                                             choices=choices, default=default)

        if label:
            self.getGtkObject('property_label').set_text(label)
        if value:
            self.setValue(value)

    def init(self):
        """
        Init form.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        pass

    def setValue(self, value):
        """
        Set value.
        """
        if value and os.path.exists(value):
            self.getGtkObject('property_image').set_from_file(value)
        else:
            log_func.warning(u'Image filename <%s> not found' % value)
            self.getGtkObject('property_image').set_from_icon_name('gtk-missing-image',
                                                                    gi.repository.Gtk.IconSize.BUTTON)
            value = None
        self.value = value

    def getValue(self):
        """
        Get value.
        """
        if self.value:
            if os.path.exists(self.value):
                return self.value
            else:
                log_func.warning(u'Image filename <%s> not found' % self.value)
        return None

    def setHelpString(self, help_string):
        """
        Set help string.

        :param help_string: Help string.
        """
        label = self.getGtkObject('property_label')
        label.set_property('tooltip-text', help_string)

    def onPropertyButtonClicked(self, widget):
        """
        Change image button click handler.
        """
        img_filename = gtk_dlg_func.getFileDlg(title=u'Select library icon file',
                                               wildcard_filter=IMAGE_WILDCARD_FILTER,
                                               default_path=icon_func.getIconPath())
        self.setValue(img_filename)
