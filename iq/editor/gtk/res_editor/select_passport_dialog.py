#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Select passport dialog.
Module <select_passport_dialog.py>.
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk
import gi.repository.GdkPixbuf

from ....util import log_func
from ....util import icon_func
from ....util import file_func
from ....util import res_func
from ....util import spc_func

from .... import components
from .... import project
from ....passport import passport

from ....engine.gtk import gtk_handler
from ....engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager


__version__ = (0, 0, 0, 1)


class iqSelectPassportDialog(gtk_handler.iqGtkHandler,
                             gtktreeview_manager.iqGtkTreeViewManager):
    """
    Select passport dialog class.
    """
    def __init__(self, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'select_passport_dialog.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='select_passport_dialog',  
                                          *args, **kwargs)

        self.component_icons = dict()

        self.passport = None

    def init(self):
        """
        Init form.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images of controls on form.
        """
        self.initComponentIcons()

    def initControls(self):
        """
        Init controls method.
        """
        pass

    def initComponentIcons(self):
        """
        Initialization component icon image list object.

        :return:
        """
        self.component_icons[None] = icon_func.getIconFilename(None)

        # Add framework icon
        self.component_icons['root'] = icon_func.getIconFilename('fatcow/folder')

        component_spc_cache = components.getComponentSpcPalette()

        if component_spc_cache:
            for package in list(component_spc_cache.keys()):
                pkg_components = component_spc_cache[package]
                for component_spc in pkg_components:
                    component_type = component_spc.get('type', None)
                    if component_type:
                        icon_name = component_spc.get('__icon__', None)
                        if icon_name:
                            component_icon_filename = icon_func.getIconFilename(icon_name)
                            self.component_icons[component_type] = component_icon_filename
                            # log_func.debug(u'Create icon <%s : %d>' % (icon_name, component_icon_filename))
                        else:
                            log_func.warning(u'Component <%s> specification not define icon' % component_type)
                            log_func.warning(u'Verify __icon__ attribute in specification')
                    else:
                        log_func.warning(u'In specification %s not define type' % component_spc)

            # self.resource_treeListCtrl.SetImageList(self.getImageLibImageList())
        else:
            log_func.warning(u'Empty component specification cache <%s>' % str(component_spc_cache))

    def buildProjects(self, root_path=None, prj_name=None):
        """
        Build project tree.

        :param root_path: Root path.
        :param prj_name: Project name.
            If None then you can choose from any project.
        :return: True/False.
        """
        if root_path is None:
            root_path = file_func.getFrameworkPath()

        # Clear
        self.clearGtkTreeView(treeview=self.getGtkObject('prj_treeview'))

        # Add root item
        root_img_filename = self.component_icons['root']
        root_img = gi.repository.GdkPixbuf.Pixbuf.new_from_file(root_img_filename)
        root_item = self.getGtkObject('prj_treestore').append(None, [root_img, u'Root', u''])

        # Add project
        prj_item = None
        if prj_name:
            dir_path = os.path.join(root_path, prj_name)
            if os.path.exists(dir_path):
                prj_item = self.getGtkObject('prj_treestore').append(root_item, [root_img, prj_name, u''])

                self._buildFolder(dir_path, parent_item=prj_item, prj_name=prj_name)
            else:
                log_func.warning(u'Project directory path <%s> not found' % dir_path)

        # Add another projects
        dir_paths = file_func.getDirectoryPaths(root_path)
        dir_paths = [dir_path for dir_path in dir_paths if os.path.basename(dir_path) not in ('iq', prj_name)]
        dir_paths.sort()
        for dir_path in dir_paths:
            if os.path.exists(dir_path):
                dir_name = os.path.basename(dir_path)
                item = self.getGtkObject('prj_treestore').append(root_item, [root_img, dir_name, u''])
                self._buildFolder(dir_path, parent_item=item, prj_name=dir_name)
            else:
                log_func.warning(u'Project directory path <%s> not found' % dir_path)

        self.expandGtkTreeViewItem(treeview=self.getGtkObject('prj_treeview'), item=root_item)
        if prj_item:
            self.expandGtkTreeViewItem(treeview=self.getGtkObject('prj_treeview'), item=prj_item)
        return True

    def _buildFolder(self, parent_path, parent_item, prj_name='unknown'):
        """
        Build folder tree.

        :param parent_path: Directory path.
        :param parent_item: Parent tree list control item.
        :param prj_name: Project name.
        :return:
        """
        folder_img_filename = self.component_icons['root']
        folder_img = gi.repository.GdkPixbuf.Pixbuf.new_from_file(folder_img_filename)
        dir_paths = file_func.getDirectoryPaths(parent_path)
        for dir_path in dir_paths:
            if os.path.exists(dir_path):
                dir_name = os.path.basename(dir_path)
                item = self.getGtkObject('prj_treestore').append(parent_item, [folder_img, dir_name, u''])

                self._buildFolder(dir_path, parent_item=item, prj_name=prj_name)
            else:
                log_func.warning(u'Project directory path <%s> not found' % dir_path)

        res_filenames = file_func.getFilePaths(parent_path)
        res_filenames = [filename for filename in res_filenames if file_func.isFilenameExt(filename,
                                                                                           res_func.RESOURCE_FILE_EXT)]
        for res_filename in res_filenames:
            if os.path.exists(res_filename):
                res_name = os.path.splitext(os.path.basename(res_filename))[0]
                resource = res_func.loadResourceText(res_filename)
                resource['__module__'] = res_name
                resource['__project__'] = prj_name
                component_type = resource.get('type', None)
                description = resource.get('description', u'')
                component_img_filename = self.component_icons.get(component_type, self.component_icons[None])
                component_img = gi.repository.GdkPixbuf.Pixbuf.new_from_file(component_img_filename)

                item = self.getGtkObject('prj_treestore').append(parent_item, [component_img, res_name, description])
                self.setGtkTreeViewItemData(treeview=self.getGtkObject('prj_treeview'), item=item, item_data=resource)
            else:
                log_func.warning(u'Project resource file <%s> not found' % res_filename)

    def buildResource(self, resource=None):
        """
        Build resource tree.

        :param resource: Object resource dictionary.
        :return: True/False.
        """
        if not resource:
            log_func.warning(u'Not define resource')
            return False

        # Clear treeview
        self.clearGtkTreeView('res_treeview')

        result = self._buildObject(resource)

        root_item = self.getGtkTreeViewRootItem(treeview=self.getGtkObject('res_treeview'))
        if root_item:
            self.expandGtkTreeViewItem(treeview=self.getGtkObject('res_treeview'), item=root_item)
        return result

    def _buildObject(self, resource, parent_item=None):
        """
        Build resource objects.

        :param resource: Resource struct.
        :param parent_item: Parent item for append resource.
            If None then append root item.
        :return: True/False.
        """
        name = resource.get('name', u'Unknown')
        component_type = resource.get('type', None)
        description = resource.get('description', u'')
        icon_filename = self.component_icons.get(component_type, self.component_icons[None])
        icon_img = gi.repository.GdkPixbuf.Pixbuf.new_from_file(icon_filename)
        # log_func.debug(u'Add new resource item <%s : %s : %s : %s>' % (component_type, name, description, icon_idx))

        if parent_item is None:
            new_item = self.getGtkObject('res_treestore').append(None, [icon_img, name, description])
        else:
            new_item = self.getGtkObject('res_treestore').append(parent_item, [icon_img, name, description])
        self.setGtkTreeViewItemData(treeview=self.getGtkObject('res_treeview'), item=new_item, item_data=resource)

        result = list()
        children = resource.get(spc_func.CHILDREN_ATTR_NAME, list())
        for child_resource in children:
            result.append(self._buildObject(child_resource, new_item))

        return all(result)

    def selectPassport(self, psp):
        """
        Select passport object.

        :param psp: Passport as string.
        :return: True/False.
        """
        obj_psp = passport.iqPassport()
        if obj_psp.isPassport(psp):
            obj_psp.setAsStr(psp)
        prj_name = obj_psp.prj
        module_name = obj_psp.module
        if prj_name and module_name:
            item = self.findItemByRes(self.getGtkObject('prj_treeview'),
                                      {'__project__': prj_name, '__module__': module_name})
            if item:
                self.selectGtkTreeViewItem(treeview=self.getGtkObject('prj_treeview'), item=item)

            obj_type = obj_psp.typename
            obj_name = obj_psp.name
            item = self.findItemByRes(self.getGtkObject('res_treeview'),
                                      {'type': obj_type, 'name': obj_name})
            if item:
                self.selectGtkTreeViewItem(treeview=self.getGtkObject('res_treeview'), item=item)

    def findItemByRes(self, treeview, res_attrs, item=None):
        """
        Find treeview item by resource elements.

        :param treeview: Tree list control object.
        :param res_attrs: Resource element attributes dictionary.
        :param item: Current find item.
            If None then get root item.
        :return: Tree list control item or None if not found.
        """
        if not treeview:
            log_func.warning(u'Not define TreeListCtrl object for find item')
            return None

        if not isinstance(res_attrs, dict):
            log_func.warning(u'Resource attributes type error <%s>' % type(res_attrs))
            return None

        if item is None:
            item = self.getGtkTreeViewRootItem(treeview=treeview)

        res_item = self.getGtkTreeViewItemData(treeview=treeview, item=item)
        if res_item:
            is_find = all([res_item.get(name, None) == value for name, value in res_attrs.items()])
            if is_find:
                return item

        if self.hasGtkTreeViewItemChildren(treeview=treeview, item=item):
            child_item = self.getGtkTreeViewFirstChild(treeview=treeview, parent_item=item)
            while child_item:
                find_item = self.findItemByRes(treeview, res_attrs, item=child_item)
                if find_item:
                    return find_item
                child_item = self.getGtkTreeViewNextChild(treeview=treeview, item=child_item)
        return None

    def getSelectedPassport(self):
        """
        Get selected passport.
        """
        return self.getGtkObject('passport_label').get_label()

    def onDeleteButtonClicked(self, widget):
        """
        Delete button click handler.
        """
        self.passport = ''
        self.getGtkTopObject().close()

    def onCancelButtonClicked(self, widget):
        """
        Cancel button click handler.
        """
        self.passport = None
        self.getGtkTopObject().close()

    def onOkButtonClicked(self, widget):
        """
        Ok button click handler.
        """
        self.passport = self.getSelectedPassport()
        self.getGtkTopObject().close()

    def onPrjTreelistSelectionChanged(self, widget):
        """
        Projects treeview control item selection changed handler.
        """
        try:
            resource = self.getGtkTreeViewSelectedItemData(treeview=self.getGtkObject('prj_treeview'))
            label = '%s.%s.%s.%s' % (resource.get('__project__', 'unknown'),
                                     resource.get('__module__', 'unknown'),
                                     resource.get('type', 'unknown'),
                                     resource.get('name', 'unknown')) if resource else u''
            self.getGtkObject('passport_label').set_label(label)

            self.buildResource(resource)
        except:
            log_func.fatal(u'Error treeview item selection changed handler')

    def onResTreelistSelectionChanged(self, widget):
        """
        Resource treeview control item selection changed handler.
        """
        try:
            resource = self.getGtkTreeViewSelectedItemData(treeview=self.getGtkObject('res_treeview'))
            root_item = self.getGtkTreeViewRootItem(treeview=self.getGtkObject('res_treeview'))
            root_resource = self.getGtkTreeViewItemData(treeview=self.getGtkObject('res_treeview'), item=root_item)
            label = '%s.%s.%s.%s' % (root_resource.get('__project__', 'unknown'),
                                     root_resource.get('__module__', 'unknown'),
                                     resource.get('type', 'unknown'),
                                     resource.get('name', 'unknown')) if resource else u''
            self.getGtkObject('passport_label').set_label(label)
        except:
            log_func.fatal(u'Error treeview item selection changed handler')


def selectPassportDialog(parent=None, prj_name=None, default_psp=None):
    """
    Open select passport dialog.

    :param parent: Parent form.
    :param prj_name: Project name.
        If None then you can choose from any project.
    :param default_psp: Default selected passport.
    :return: Passport as string or None if Cancel pressed or error.
    """
    log_func.debug(u'Select passport')
    result = False
    dlg = None
    try:
        dlg = iqSelectPassportDialog()
        dlg.init()
        dlg.buildProjects(prj_name=prj_name)
        if default_psp:
            dlg.selectPassport(default_psp)

        response = dlg.getGtkTopObject().run()
        if response == gi.repository.Gtk.ResponseType.OK:
            result = dlg.passport
    except:
        log_func.fatal(u'Error open window <select_passport_dialog>')

    if dlg and dlg.getGtkTopObject() is not None:
        dlg.getGtkTopObject().destroy()
    return result                    
