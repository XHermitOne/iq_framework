#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module <edit_stringlist_dialog.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk

from ....util import log_func

from ....engine.gtk import gtk_handler
from ....engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager

__version__ = (0, 0, 0, 1)


class iqEditStringListDialog(gtk_handler.iqGtkHandler,
                             gtktreeview_manager.iqGtkTreeViewManager):
    """
    Edit string list dialog class.
    """
    def __init__(self, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'edit_stringlist_dialog.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='edit_stringlist_dialog',  
                                          *args, **kwargs)

        self.string_list = list()

    def init(self):
        """
        Init form.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        pass

    def setStringList(self, string_list):
        """
        Set string list in dialog.
        """
        self.clearGtkTreeView(treeview=self.getGtkObject('stringlist_treeview'))
        if string_list:
            treeview = self.getGtkObject('stringlist_treeview')
            model = treeview.get_model()
            for item in string_list:
                model.append([str(item)])

    def getStringList(self):
        """
        Get string list from dialog.
        """
        result = list()
        treeview = self.getGtkObject('stringlist_treeview')
        model = treeview.get_model()
        item = self.getGtkTreeViewFirstChild(treeview=treeview, parent_item=None)
        while item:
            value = model.get_value(item, 0)
            result.append(value)
            item = self.getGtkTreeViewNextChild(treeview=treeview, item=item)
        return tuple(result)

    def onCancelButtonClicked(self, widget):
        """
        Cancel button click handler.
        """
        self.getGtkTopObject().close()

    def onOkButtonClicked(self, widget):
        """
        Ok button click handler.
        """
        self.getGtkTopObject().close()

    def onEditToolItemClicked(self, widget):
        """
        Edit tool item click handler.
        """
        pass

    def onAddToolItemClicked(self, widget):
        """
        Add tool item click handler.
        """
        pass

    def onDelToolItemClicked(self, widget):
        """
        Delete tool item click handler.
        """
        pass

    def onMoveUpToolItemClicked(self, widget):
        """
        Move up tool item click handler.
        """
        pass

    def onMoveDownToolItemClicked(self, widget):
        """
        Move down tool item click handler.
        """
        pass


def editStringlistDialog(parent=None, title=u'', string_list=()):
    """
    Open edit string list dialog.

    :return: Edited string list or None if cancel pressed.
    """
    result = None
    dlg = None
    try:
        dlg = iqEditStringListDialog()
        dlg.init()
        if title:
            dlg.getGtkTopObject().set_title(title)
        dlg.setStringList(string_list)

        response = dlg.getGtkTopObject().run()
        if response == gi.repository.Gtk.ResponseType.OK:
            result = dlg.getStringList()
    except:
        log_func.fatal(u'Error open window <edit_stringlist_dialog>')

    if dlg and dlg.getGtkTopObject() is not None:
        dlg.getGtkTopObject().destroy()
    return result                    
