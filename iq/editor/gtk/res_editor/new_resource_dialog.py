#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module <new_resource_dialog.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import copy
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk
import gi.repository.Gdk

from iq.util import log_func
from ....util import file_func
from ....util import res_func
from ....util import spc_func
from ....util import id_func
from ....util import icon_func
from ....util import lang_func
from .... import components

from iq.engine.gtk import gtk_handler
# from iq.engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager

from . import select_component_menu

__version__ = (0, 0, 0, 1)

_ = lang_func.getTranslation().gettext


class iqNewResourceDialog(gtk_handler.iqGtkHandler):
    """
    Unknown class.
    """
    def __init__(self, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'new_resource_dlg.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='new_resource_dialog',  
                                          *args, **kwargs)
        self.res_filename = None
        self.resource = None

        self.component_menu = None

    def init(self, component_spc=None, component_name=None, res_filename=None):
        """
        Initialization dialog.

        :param component_spc: Resource component specification.
        :param component_name: Component name.
        :param res_filename: Resource filename.
        :return:
        """
        self.initImages()
        self.initControls()

        if component_spc:
            component_type = component_spc.get('type', '')
            if component_type:
                self.getGtkObject('component_entry').set_text(component_type)
                icon = component_spc.get(spc_func.ICON_ATTR_NAME, None)
                if icon:
                    icon_filename = icon_func.getIconFilename(icon)
                    self.getGtkObject('component_image').set_from_file(icon_filename)
                else:
                    self.getGtkObject('component_image').set_from_icon_name('gtk-missing-image',
                                                                            gi.repository.Gtk.IconSize.BUTTON)

        if component_name:
            self.getGtkObject('name_entry').set_text(component_name)
        if res_filename:
            self.getGtkObject('path_chooser_button').set_current_folder(os.path.dirname(res_filename))
        else:
            res_filename = self.genResFilename(component_name)
            if res_filename:
                self.getGtkObject('path_chooser_button').set_current_folder(os.path.dirname(res_filename))
        if res_filename:
            self.res_filename = res_filename
        if component_spc:
            self.resource = copy.deepcopy(component_spc)
            if component_name:
                self.resource['name'] = component_name
            if not self.resource.get('guid', None):
                self.resource['guid'] = id_func.genGUID()

        self.getGtkObject('ok_button').set_sensitive(bool(component_spc) and bool(component_name) and bool(res_filename))

    def genResFilename(self, component_name):
        """
        Generate resource filename by component_name.

        :param component_name: Component name.
        :return: New resource filename or None if error.
        """
        if component_name:
            res_filename = os.path.join(file_func.getProjectPath(),
                                        component_name + res_func.RESOURCE_FILE_EXT)
            return res_filename
        return None

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        self.component_menu = select_component_menu.iqSelectComponentMenu()
        self.component_menu.init(parent=self, parent_component=None)
        self.component_menu.create(menuitem_handler=self.onSelectComponentMenuItemActivate)

    def onDestroy(self, widget):
        """
        Destroy dialog handler.
        """
        if self.component_menu is not None:
            self.component_menu.destroy()
            self.component_menu = None

    def onCancelButtonClicked(self, widget):
        """
        Button click <Cancel> handler.
        """
        self.res_filename = None
        self.resource = None
        self.getGtkTopObject().close()

    def onOkButtonClicked(self, widget):
        """
        Button click <OK> handler.
        """
        dir_path = self.getGtkObject('path_chooser_button').get_current_folder()
        base_res_filename = self.getGtkObject('name_entry').get_value() + res_func.RESOURCE_FILE_EXT
        self.res_filename = os.path.join(dir_path, base_res_filename)

        component_type = self.getGtkObject('component_entry').get_value()
        component_spc = components.findComponentSpc(component_type)
        self.resource = copy.deepcopy(component_spc)
        self.resource['name'] = self.getGtkObject('name_entry').get_value().strip()
        if not self.resource.get('guid', None):
            self.resource['guid'] = id_func.genGUID()

        self.getGtkTopObject().close()

    def onSelectComponentButtonClicked(self, widget, event):
        """
        Component button click handler.
        """
        if event.type == gi.repository.Gdk.EventType.BUTTON_PRESS and event.button.button == 1:
            try:
                if self.component_menu:
                    self.component_menu.popup(None, None, None, None,
                                              event.button.button,
                                              event.time)
                                              # gi.repository.Gtk.get_current_event_time())
                    # self.component_menu.popup_at_pointer(event)
                else:
                    log_func.warning(u'Not create component menu')
            except:
                log_func.fatal(u'Error component select button')

            return True
        return False

    def onSelectComponentMenuItemActivate(self, widget):
        """
        Select component menu item handler.
        """
        if self.component_menu:
            menuitem_id = widget.guid
            selected_component = self.component_menu.menuitem2component_spc.get(menuitem_id, None)
            component_type = selected_component.get('type', 'UndefinedType')
            # bmp = wxbitmap_func.createIconBitmap(selected_component.get(spc_func.ICON_ATTR_NAME, None))
            icon = selected_component.get(spc_func.ICON_ATTR_NAME, None)
            icon_filename = icon_func.getIconFilename(icon)
            self.getGtkObject('component_entry').set_text(component_type)
            self.getGtkObject('component_image').set_from_file(icon_filename)

            name = self.getGtkObject('name_entry').get_text().strip()
            if not name:
                name = selected_component.get('name', 'default') + id_func.genNewId()
                self.getGtkObject('name_entry').set_text(name)

            cur_path = self.getGtkObject('path_chooser_button').get_current_folder()
            if name and not cur_path:
                self.res_filename = self.genResFilename(component_name=name)
                self.getGtkObject('path_chooser_button').set_current_folder(os.path.dirname(self.res_filename))

            log_func.info(u'Selected component <%s>' % component_type)
            self.component_menu = None

        self.getGtkObject('ok_button').set_sensitive(bool(self.getGtkObject('component_entry').get_text()) and
                                                     bool(self.getGtkObject('name_entry').get_text()) and
                                                     bool(self.getGtkObject('path_chooser_button').get_current_folder()))


def openNewResourceDialog():
    """
    Open new_resource_dialog.

    :return: True/False.
    """
    result = False
    obj = None
    try:
        obj = iqNewResourceDialog()
        obj.init()
        obj.getGtkTopObject().run()
        result = True
    except:
        log_func.fatal(u'Error open window <new_resource_dialog>')

    if obj and obj.getGtkTopObject() is not None:
        obj.getGtkTopObject().destroy()
    return result                    


def createNewResource(parent=None, component_spc=None, component_name=None, res_filename=None):
    """
    Create new resource.

    :param parent: Parent frame.
    :param component_spc: Resource component specification.
    :param component_name: Component name.
    :param res_filename: Resource filename.
    :return: New resource filename or None if error or Cancel button pressed.
    """
    result = None
    dlg = None
    try:
        dlg = iqNewResourceDialog()
        dlg.init(component_spc, component_name, res_filename)

        response = dlg.getGtkTopObject().run()
        if response == gi.repository.Gtk.ResponseType.OK:
            resource = spc_func.clearAllResourcesFromSpc(dlg.resource)
            if res_func.saveResourceText(dlg.res_filename, resource):
                result = dlg.res_filename
    except:
        log_func.fatal(u'Error create new resource')

    if dlg and dlg.getGtkTopObject() is not None:
        dlg.getGtkTopObject().destroy()
    return result
