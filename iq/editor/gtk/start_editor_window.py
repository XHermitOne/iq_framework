#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module <start_editor_window.py>. 
Generated by the iqFramework module the Glade prototype.
"""

import os
import os.path
import signal
import gi

gi.require_version('Gtk', '3.0')
import gi.repository.Gtk

from iq.util import log_func

from iq.engine.gtk import gtk_handler
# from iq.engine.gtk import gtktreeview_manager
# from iq.engine.gtk import gtkwindow_manager

from ...project import prj

from ...project import prj_func
from ...engine.gtk import stored_gtk_form_manager
from ...dialog import dlg_func

__version__ = (0, 0, 0, 1)


class iqStartEditorWindow(gtk_handler.iqGtkHandler,
                          stored_gtk_form_manager.iqStoredGtkFormsManager):
    """
    Start edit project window class.
    """
    def __init__(self, *args, **kwargs):
        self.glade_filename = os.path.join(os.path.dirname(__file__), 'start_editor_win.glade')
        gtk_handler.iqGtkHandler.__init__(self, glade_filename=self.glade_filename,
                                          top_object_name='start_editor_window',  
                                          *args, **kwargs)

        self._project_manager = prj.iqProjectManager()

        self.loadCustomProperties()

    def init(self):
        """
        Init form.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images of controls on form.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        pass

    def onDestroy(self, *args, **kwargs):
        """
        Destroy window handler.
        """
        self.saveCustomProperties()
        gi.repository.Gtk.main_quit()

    def onNewProjectButtonClicked(self, widget):
        """
        New project button click handler.
        """
        self._project_manager.create(parent=self)

        self.getGtkTopObject().close()

    def onRunProjectButtonClicked(self, widget):
        """
        Run project button click handler.
        """
        prj_descriptions = prj_func.getProjectDescriptions()

        prj_data = list(prj_descriptions.items())
        prj_data.sort()
        prj_names = [name for name, description in prj_data]
        prj_items = [u'%s\t:\t%s' % (name, description) for name, description in prj_data]
        selected_prj_idx = dlg_func.getSingleChoiceIdxDlg(parent=self, title='PROJECTS',
                                                          prompt_text=u'Select a project to run:',
                                                          choices=prj_items)
        if selected_prj_idx >= 0:
            selected_prj_name = prj_names[selected_prj_idx]
            self._project_manager.run(selected_prj_name)

        self.getGtkTopObject().close()

    def onDebugProjectButtonClicked(self, widget):
        """
        Debug button click handler.
        """
        prj_names = prj_func.getProjectNames()
        selected_prj_name = dlg_func.getSingleChoiceDlg(parent=self, title='PROJECTS',
                                                        prompt_text=u'Select a project to debug:',
                                                        choices=prj_names)
        if selected_prj_name:
            self._project_manager.debug(selected_prj_name)

        self.getGtkTopObject().close()

    def onExtToolsButtonClicked(self, widget):
        """
        Extended tools button click handler.
        """
        self.getGtkTopObject().close()

    def onHelpButtonClicked(self, widget):
        """
        Help button click handler.
        """
        self.getGtkTopObject().close()

    def onExitButtonClicked(self, widget):
        """
        Exit button handler.
        """
        self.getGtkTopObject().close()


def openStartEditorWindow():
    """
    Open start_editor_window.

    :return: True/False.
    """
    result = False
    win = None
    try:
        win = iqStartEditorWindow()
        win.init()
        win.getGtkTopObject().run()
        result = True
    except:
        log_func.fatal(u'Error open window <start_editor_window>')

    if win and win.getGtkTopObject() is not None:
        win.getGtkTopObject().destroy()

    return result


def startEditor():
    """
    Open start_editor_window.

    :return: True/False.
    """
    log_func.info(u'GTK library version: %s' % gi.__version__)

    result = False
    win = None
    try:
        win = iqStartEditorWindow()
        win.init()
        win.getGtkTopObject().show_all()
        result = True
    except:
        log_func.fatal(u'Error open window <start_editor_window>')

    gi.repository.Gtk.main()

    if win and win.getGtkTopObject() is not None:
        win.getGtkTopObject().destroy()
    return result


if __name__ == '__main__':
    startEditor()
