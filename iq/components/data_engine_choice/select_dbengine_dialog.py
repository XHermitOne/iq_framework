#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Dialog module <iqSelectDBEngineDialogProto>. 
Generated by the iqFramework module the wxFormBuider prototype dialog.
"""

import wx
from . import select_db_engine_dlg_proto

import iq
from iq.util import log_func
from iq.util import global_func
from iq.util import lang_func

from iq.dialog import dlg_func

from iq.engine.wx import form_manager
from iq.engine.wx import toolbar_manager

__version__ = (0, 0, 0, 1)

_ = lang_func.getTranslation().gettext


class iqSelectDBEngineDialog(select_db_engine_dlg_proto.iqSelectDBEngineDialogProto,
                             form_manager.iqFormManager,
                             toolbar_manager.iqToolBarManager):
    """
    Dialog.
    """
    def __init__(self, *args, **kwargs):
        """
        Constructor.
        """
        select_db_engine_dlg_proto.iqSelectDBEngineDialogProto.__init__(self, *args, **kwargs)

        self._manager = None

    def setManager(self, manager=None):
        """
        Set db engine choice manager.
        """
        self._manager = manager

    def getManager(self):
        """
        Get db engine choice manager.
        """
        return self._manager

    def init(self):
        """
        Init dialog.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images method.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        is_admin = global_func.isAdministratorUser()

        self.enableToolbarTools(toolbar=self.ctrl_toolBar,
                                new_tool=is_admin,
                                del_tool=is_admin,
                                edit_tool=is_admin)

        self.refreshDBList()

    def refreshDBList(self, auto_select_first=False):
        """
        Refresh database list.
        """
        try:
            manager = self.getManager()
            if manager:
                data = manager.getData()
                if data:
                    choices = [item['description'] for item in data['records']]
                    self.db_listBox.Clear()
                    self.db_listBox.AppendItems(choices)
                    if choices and auto_select_first:
                        self.db_listBox.SetSelection(0)
        except:
            log_func.fatal(u'Error refresh database engine list')

    def onCancelButtonClick(self, event):
        """
        Cancel button click handler.
        """
        self.EndModal(wx.ID_CANCEL)
        event.Skip()

    def onDelToolClicked(self, event):
        """
        Delete tool click handler.
        """
        i_selected = self.db_listBox.GetSelection()
        if i_selected >= 0:
            manager = self.getManager()
            if manager:
                try:
                    data = manager.getData()
                    db_record = data['records'][i_selected]
                    manager.deleteDB(parent=self, db_guid=db_record['guid'])

                    self.refreshDBList()
                except:
                    log_func.fatal(u'Error delete DB engine')
        event.Skip()

    def onEditToolClicked(self, event):
        """
        Edit tool click handler.
        """
        i_selected = self.db_listBox.GetSelection()
        if i_selected >= 0:
            manager = self.getManager()
            if manager:
                try:
                    data = manager.getData()
                    db_record = data['records'][i_selected]
                    manager.editDB(parent=self, db_guid=db_record['guid'])

                    self.refreshDBList()
                except:
                    log_func.fatal(u'Error edit DB engine')
        event.Skip()

    def onNewToolClicked(self, event):
        """
        New tool click handler.
        """
        manager = self.getManager()
        if manager:
            try:
                manager.newDB(parent=self)

                self.refreshDBList()
            except:
                log_func.fatal(u'Error new DB engine')
        event.Skip()

    def onOkButtonClick(self, event):
        """
        Ok button click handler.
        """
        manager = self.getManager()
        if manager:
            manager.save()

        self.EndModal(wx.ID_OK)
        event.Skip()

    def onTestToolClicked(self, event):
        """
        Test tool click handler.
        """
        i_selected = self.db_listBox.GetSelection()
        if i_selected >= 0:
            manager = self.getManager()
            if manager:
                try:
                    data = manager.getData()
                    db_record = data['records'][i_selected]
                    manager.updateValues(**db_record)
                    check_connection = manager.checkConnection()
                    if check_connection:
                        dlg_func.openMsgBox(_(u'MESSAGE'),
                                            _(u'Database connection established') + u' <%s>' % manager.getDBUrl())
                        return True
                    else:
                        dlg_func.openErrBox(_(u'ERROR'),
                                            _(u'Database connection not established') + u' <%s>' % manager.getDBUrl())
                    return False
                except:
                    log_func.fatal(u'Error delete DB engine')
        event.Skip()


def openSelectDBEngineDialog(parent=None, manager=None):
    """
    Open dialog.

    :param parent: Parent window.
    :return: True/False.
    """
    dialog = None
    try:
        if parent is None:
            parent = global_func.getMainWin()

        dialog = iqSelectDBEngineDialog(parent)
        dialog.setManager(manager)
        dialog.init()
        result = dialog.ShowModal()
        dialog.Destroy()
        return result == wx.ID_OK
    except:
        if dialog:
            dialog.Destroy()
        log_func.fatal(u'Error open dialog <iqSelectDBEngineDialog>')
    return False

