#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Dialog module <iqEditDBEngineDialogProto>. 
Generated by the iqFramework module the wxFormBuider prototype dialog.
"""

import wx
from . import edit_db_engine_dlg_proto

import iq
from iq.util import log_func
from iq.util import global_func

from iq.engine.wx import form_manager


from ..data_engine import spc

__version__ = (0, 0, 0, 1)


class iqEditDBEngineDialog(edit_db_engine_dlg_proto.iqEditDBEngineDialogProto, form_manager.iqFormManager):
    """
    Dialog.
    """
    def __init__(self, *args, **kwargs):
        """
        Constructor.
        """
        edit_db_engine_dlg_proto.iqEditDBEngineDialogProto.__init__(self, *args, **kwargs)

        self._record = dict()

    def getRecord(self):
        """
        Get current record.
        """
        return self._record

    def init(self):
        """
        Init dialog.
        """
        self.initImages()
        self.initControls()

    def initImages(self):
        """
        Init images method.
        """
        pass

    def initControls(self):
        """
        Init controls method.
        """
        self.refreshDialectDriver()

        self.charset_choice.Clear()
        self.charset_choice.AppendItems(spc.getEncodings())
        self.charset_choice.SetStringSelection('utf8')

    def refreshDialectDriver(self, dialect=None, driver=None):
        """
        Refresh dialect and driver choices.
        """
        dialects = list(spc.DB_DRIVERS.keys())
        self.dialect_choice.Clear()
        self.dialect_choice.AppendItems(dialects)
        if dialect is None:
            self.dialect_choice.SetSelection(0)
        else:
            self.dialect_choice.SetSelection(dialects.index(dialect))

        drivers = spc.DB_DRIVERS[dialects[0]] if dialect is None else spc.DB_DRIVERS[dialects.index(dialect)]
        self.driver_choice.Clear()
        self.driver_choice.AppendItems(drivers)
        if driver is None:
            self.driver_choice.SetSelection(0)
        else:
            self.driver_choice.SetSelection(drivers.index(driver))

    def setValues(self, record):
        """
        Set control values.
        """
        description = record.get('description', '')
        self.name_textCtrl.SetValue(description)

        dialect = record.get('dialect', None)
        driver = record.get('driver', None)
        self.refreshDialectDriver(dialect=dialect, driver=driver)

        host = record.get('host', '')
        self.host_textCtrl.SetValue(host)
        port = record.get('port', '')
        self.port_textCtrl.SetValue(port)
        db_name = record.get('db_name', '')
        self.dbname_textCtrl.SetValue(db_name)
        username = record.get('username', '')
        self.username_textCtrl.SetValue(username)
        password = record.get('password', '')
        self.password_textCtrl.SetValue(password)

        db_filename = record.get('db_filename', '')
        self.db_filePicker.SetPath(db_filename)

        echo = record.get('echo', False)
        self.echo_checkBox.SetValue(echo)
        convert_unicode = record.get('convert_unicode', False)
        self.convert_unicode_checkBox.SetValue(convert_unicode)
        charset = record.get('charset', 'utf8')
        self.charset_choice.SetStringSelection(charset)

    def getValues(self):
        """
        Get values.
        """
        values = dict(description=self.name_textCtrl.GetValue(),
                      dialect=self.dialect_choice.GetStringSelection(),
                      driver=self.driver_choice.GetStringSelection(),
                      host=self.host_textCtrl.GetValue(),
                      port=self.port_textCtrl.GetValue(),
                      db_name=self.dbname_textCtrl.GetValue(),
                      username=self.username_textCtrl.GetValue(),
                      password=self.password_textCtrl.GetValue(),
                      db_filename=self.db_filePicker.GetPath(),
                      echo=self.echo_checkBox.GetValue(),
                      convert_unicode=self.convert_unicode_checkBox.GetValue(),
                      charset=self.charset_choice.GetStringSelection())
        return values

    def onCancelButtonClick(self, event):
        """
        Cancel button click handler.
        """
        self._record = None
        self.EndModal(wx.ID_CANCEL)
        event.Skip()

    def onOkButtonClick(self, event):
        """
        Cancel button click handler.
        """
        self._record = self.getValues()
        self.EndModal(wx.ID_OK)
        event.Skip()

    def onDialectChoice(self, event):
        """
        Change dialect handler.
        """
        event.Skip()


def openNewDBEngineDialog(parent=None):
    """
    Open new database engine dialog.

    :param parent: Parent window.
    :return: Record dictionary or None if error.
    """
    dialog = None
    try:
        if parent is None:
            parent = global_func.getMainWin()

        dialog = iqEditDBEngineDialog(parent)
        dialog.init()
        result = dialog.ShowModal()
        record = dialog.getRecord()
        dialog.Destroy()
        if result == wx.ID_OK:
            return record
    except:
        if dialog:
            dialog.Destroy()
        log_func.fatal(u'Error open dialog <iqNewDBEngineDialog>')
    return None


def openEditDBEngineDialog(parent=None, db_record=None):
    """
    Open edit database engine dialog.

    :param parent: Parent window.
    :param db_record: Database editable record.
    :return: True/False.
    """
    dialog = None
    try:
        if parent is None:
            parent = global_func.getMainWin()

        dialog = iqEditDBEngineDialog(parent)
        dialog.init()
        if db_record:
            dialog.setValues(db_record)
        result = dialog.ShowModal()
        record = dialog.getRecord()
        dialog.Destroy()
        if result == wx.ID_OK:
            return record
    except:
        if dialog:
            dialog.Destroy()
        log_func.fatal(u'Error open dialog <iqEditDBEngineDialog>')
    return False
