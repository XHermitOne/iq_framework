#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Dialog module <iqSelectFavoritesDialogProto>. 
Generated by the iqFramework module the wxFormBuider prototype dialog.
"""

import wx
from . import select_favorites_dlg_proto

import iq
from iq.util import log_func
from iq.util import global_func

from iq.engine.wx import wxobj_func
from iq.engine.wx import wxbitmap_func
from iq.engine.wx import form_manager

__version__ = (0, 0, 2, 1)


class iqSelectFavoritesDialog(select_favorites_dlg_proto.iqSelectFavoritesDialogProto, form_manager.iqFormManager):
    """
    Dialog.
    """
    def __init__(self, *args, **kwargs):
        """
        Constructor.
        """
        select_favorites_dlg_proto.iqSelectFavoritesDialogProto.__init__(self, *args, **kwargs)

        self.to_refobj = None

    def init(self, fields, search_fields):
        """
        Dialog initialization function.

        :param fields: List of field names to be displayed in the tree control.
            If no fields are specified, only <Code> and <Name> are displayed.
        :param search_fields: Search fields.
        """
        self.initImages()
        self.initControls(fields, search_fields)

    def initImages(self):
        """
        Init images method.
        """
        bmp = wxbitmap_func.createIconBitmap(icon_filename='fatcow/broom')
        if bmp:
            self.clear_bpButton.SetBitmap(bitmap=bmp)

    def initControls(self, fields, search_fields):
        """
        Init controls method.

        :param fields: List of field names to be displayed in the tree control.
            If no fields are specified, only <Code> and <Name> are displayed.
        :param search_fields: Search fields.
        """
        self.from_ref_obj_comboctrl.setViewFieldnames(fields)
        self.from_ref_obj_comboctrl.setSearchFieldnames(search_fields)

        from_refobj = self.from_ref_obj_comboctrl.getRefObj()
        if from_refobj:
            self.from_staticText.SetLabel(from_refobj.getDescription())
        if self.to_refobj:
            self.to_staticText.SetLabel(self.to_refobj.getDescription())

    def setDefaultCodes(self, default_codes=None):
        """
        Set default codes in source ref-object.

        :param default_codes: Default_codes.
        :return: True/False.
        """
        if default_codes:
            return self.from_ref_obj_comboctrl.setCodes(default_codes)
        return False

    def addFavorites(self, add_codes):
        """
        Add favorites to destination ref-object.

        :param add_codes: Add codes list.
        :return: True/False.
        """
        from_refobj = self.from_ref_obj_comboctrl.getRefObj()
        if not from_refobj:
            log_func.warning(u'Not defined source ref-object for select favorites')
            return None
        if not self.to_refobj:
            log_func.warning(u'Not defined destination ref-object for select favorites')
            return None

        try:
            for cod in add_codes:
                cod_tuple = from_refobj.getCodAsTuple(cod)
                for i in range(len(cod_tuple)):
                    new_cod = ''.join(cod_tuple[:i+1])
                    from_rec = from_refobj.getRecByCod(new_cod)
                    if from_refobj.getCodColumnName() in from_rec:
                        del from_rec[from_refobj.getCodColumnName()]
                    self.to_refobj.save(cod=new_cod, **from_rec)
            return True
        except:
            log_func.fatal(u'Error add favorites ref-object from <%s> to <%s>' % (from_refobj.getName(),
                                                                                  self.to_refobj.getName()))

        return False

    def onAddButtonClick(self, event):
        """
        Add favorites button click handler.
        """
        self.addFavorites(add_codes=self.from_ref_obj_comboctrl.getSelectedCodes())
        self.from_ref_obj_comboctrl.setValue(None)
        self.EndModal(wx.ID_OK)
        event.Skip()

    def onCancelButtonClick(self, event):
        """
        Cancel button click handler.
        """
        self.EndModal(wx.ID_CANCEL)
        event.Skip()

    def onClearButtonClick(self, event):
        """
        Clear ref-object choice codes.
        """
        self.from_ref_obj_comboctrl.setValue(None)
        event.Skip()


def openSelectFavoritesDialog(parent=None, from_refobj=None, to_refobj=None, fields=None,
                              default_checked_codes=None, search_fields=None,
                              clear_cache=False):
    """
    Open dialog select favorites ref-objects.

    :param parent: Parent window.
    :param from_refobj: Source ref-object.
    :param to_refobj: Destination ref_object.
    :param fields: List of field names that
         must be displayed in the tree control.
         If no fields are specified, only
         <Code> and <Name>.
    :param default_checked_codes: The checked codes is the default.
         If None, then nothing is checked.
    :param search_fields: Fields to search for.
         If not specified, then the displayed fields are taken.
    :param clear_cache: Clear cache?
    :return: True/False.
    """
    dialog = None

    try:
        if parent is None:
            parent = global_func.getMainWin()

        dialog = iqSelectFavoritesDialog(parent)
        dialog.from_ref_obj_comboctrl.setRefObj(from_refobj)
        dialog.to_refobj = to_refobj
        dialog.init(fields, search_fields)
        dialog.setDefaultCodes(default_checked_codes)

        result = dialog.ShowModal()
        dialog.Destroy()
        return result == wx.ID_OK
    except:
        if dialog:
            dialog.Destroy()
        log_func.fatal(u'Error open dialog <iqSelectFavoritesDialog>')
    return False

